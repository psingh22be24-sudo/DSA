question 1

#include <bits/stdc++.h>
using namespace std;

void generateBinary(int n) {
    if (n <= 0) return;
    queue<string> q;
    q.push("1");
    while (n--) {
        string s = q.front();
        q.pop();
        cout << s;
        if (n > 0) cout << ", ";
        q.push(s + "0");
        q.push(s + "1");
    }
    cout << "\n";
}

int main() {
    int n;
    cout << "Enter n: ";
    cin >> n;
    generateBinary(n);
    return 0;
}

question 2 

#include <bits/stdc++.h>
using namespace std;


int getMinIndex(queue<int>& q, int sortedIndex) {
    int minIndex = -1;
    int minValue = INT_MAX;
    int n = q.size();

    for (int i = 0; i < n; i++) {
        int current = q.front();
        q.pop();

        
        if (current <= minValue && i <= sortedIndex) {
            minIndex = i;
            minValue = current;
        }

        q.push(current);
    }
    return minIndex;
}


void moveMinToRear(queue<int>& q, int minIndex) {
    int minValue;
    int n = q.size();

    for (int i = 0; i < n; i++) {
        int current = q.front();
        q.pop();

        if (i != minIndex) q.push(current);
        else minValue = current;
    }
    q.push(minValue);
}


void sortQueue(queue<int>& q) {
    for (int i = 1; i <= q.size(); i++) {
        int minIndex = getMinIndex(q, q.size() - i);
        moveMinToRear(q, minIndex);
    }
}

int main() {
    queue<int> q;
    q.push(11);
    q.push(5);
    q.push(4);
    q.push(21);

    cout << "Original Queue: ";
    queue<int> temp = q;
    while (!temp.empty()) {
        cout << temp.front() << " ";
        temp.pop();
    }
    cout << "\n";

    sortQueue(q);

    cout << "Sorted Queue: ";
    while (!q.empty()) {
        cout << q.front() << " ";
        q.pop();
    }
    cout << "\n";

    return 0;
}


question 3 

#include <bits/stdc++.h>
using namespace std;

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    
    vector<int> vals;
    int x;
    while (cin >> x) vals.push_back(x);
    if (vals.empty()) return 0;

    int n = vals.size();

    
    vector<int> seen(n+1,0);
    for (int v : vals) {
        if (v < 1 || v > n) { cout << "No\n"; return 0; }
        seen[v]++;
        if (seen[v] > 1) { cout << "No\n"; return 0; }
    }

    queue<int> q;
    for (int v : vals) q.push(v);
    stack<int> st;
    int expected = 1;

    while (!q.empty()) {
        if (q.front() == expected) {
            q.pop();
            ++expected;
        } else if (!st.empty() && st.top() == expected) {
            st.pop();
            ++expected;
        } else {
            st.push(q.front());
            q.pop();
        }
    }

    while (!st.empty() && st.top() == expected) {
        st.pop();
        ++expected;
    }

    cout << (expected == n + 1 ? "Yes" : "No") << '\n';
    return 0;
}

question 4

#include <bits/stdc++.h>
using namespace std;
int countUnable(vector<int>& students, vector<int>& sandwiches){
    int c0 = 0, c1 = 0;
    for(int x: students) (x==0?++c0:++c1);
    for(int s: sandwiches){
        if(s==0){
            if(c0>0) --c0;
            else break;
        } else {
            if(c1>0) --c1;
            else break;
        }
    }
    return c0 + c1;
}
int main(){
    vector<int> students{1,1,0,0}, sandwiches{0,1,0,1};
    cout << countUnable(students, sandwiches) << '\n'; // 0
}

